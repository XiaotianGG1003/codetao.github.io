import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as s,a as i,b as n,e as l,f as c}from"./app-f91ee567.js";const r="/assets/image-20240401203045283-3a7f9aa7.png",d={},o=n("h1",{id:"docker基本操作命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker基本操作命令","aria-hidden":"true"},"#"),l(" Docker基本操作命令")],-1),t=c(`<h2 id="docker基本命令" tabindex="-1"><a class="header-anchor" href="#docker基本命令" aria-hidden="true">#</a> Docker基本命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run 启动一个新容器。
<span class="token function">docker</span> start 启动一个已经停止的容器。
<span class="token function">docker</span> stop 停止正在运行的容器。
<span class="token function">docker</span> <span class="token function">ps</span> 列出所有正在运行的容器。
<span class="token function">docker</span> <span class="token function">ps</span> -a列出所有容器（包括已经停止的）。
<span class="token function">docker</span> images 列出所有镜像。
<span class="token function">docker</span> pull 拉取一个镜像到本地。
<span class="token function">docker</span> push 将一个本地的镜像推送到远程仓库。
<span class="token function">docker</span> <span class="token function">rm</span> 删除一个已经停止的容器。
<span class="token function">docker</span> rmi 删除一个镜像。
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> 在正在运行的容器中执行命令。
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器名 bash进入容器
<span class="token function">docker</span> inspect 查看容器或镜像的详细信息。
<span class="token function">docker</span> build 根据 Dockerfile 创建镜像。
<span class="token function">docker-compose</span> 用于多容器的编排和管理。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行一个容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> containerName <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>docker run ：创建并运行一个容器</li><li>--name : 给容器起一个名字，比如叫做mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><h2 id="基于java17构建java项目" tabindex="-1"><a class="header-anchor" href="#基于java17构建java项目" aria-hidden="true">#</a> 基于java17构建Java项目</h2><ul><li><p>新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile，将要构建的项目放在目录下。实例中为Middleware-Practice-0.0.1-SNAPSHOT.jar</p></li><li><p>编写Dockerfile文件：</p><figure><img src="`+r+`" alt="image-20240401203045283" tabindex="0" loading="lazy"><figcaption>image-20240401203045283</figcaption></figure><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> openjdk:17-jdk-alpine</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./Middleware-Practice-0.0.1-SNAPSHOT.jar /app</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /app/Middleware-Practice-0.0.1-SNAPSHOT.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>使用docker build命令构建镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>使用当前目录的 Dockerfile 创建镜像，标签为 hello-world
--tag, -t: 镜像的名字及标签
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> hello-world <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用docker run创建容器并运行</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> Myhello-wolrd <span class="token parameter variable">-p8080:8080</span> <span class="token parameter variable">-d</span> hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>小结：</p><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：openjdk:17-jdk-alpine</p></li></ol>`,11);function p(u,k){return e(),s("div",null,[o,i(" more "),t])}const b=a(d,[["render",p],["__file","docker.html.vue"]]);export{b as default};
